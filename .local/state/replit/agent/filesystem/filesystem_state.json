{"file_contents":{"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.2\",\n    \"openai>=1.108.1\",\n]\n","size_bytes":187},"client/README.md":{"content":"# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you canâ€™t go back!**\n\nIf you arenâ€™t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point youâ€™re on your own.\n\nYou donâ€™t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldnâ€™t feel obligated to use this feature. However we understand that this tool wouldnâ€™t be useful if you couldnâ€™t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n","size_bytes":2117},"client/postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    autoprefixer: {},\n  },\n}\n","size_bytes":61},"client/tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n    \"./public/index.html\"\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f9ff',\n          500: '#3b82f6',\n          600: '#2563eb',\n          700: '#1d4ed8'\n        },\n        gray: {\n          750: '#374151',\n          850: '#1f2937'\n        }\n      },\n      fontFamily: {\n        sans: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'sans-serif']\n      }\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography')\n  ],\n}\n\n","size_bytes":625},"server/server.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst path = require('path');\nrequire('dotenv').config();\n\nconst { initDB } = require('./config/database');\nconst authRoutes = require('./routes/auth');\nconst chatRoutes = require('./routes/chat');\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Initialize database\ninitDB().catch(err => {\n  console.error('Failed to initialize database:', err);\n  process.exit(1);\n});\n\n// Security middleware\napp.use(helmet({\n  crossOriginEmbedderPolicy: false // Allow embedding for development\n}));\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' \n    ? ['https://your-domain.vercel.app'] // Update with your production domain\n    : ['http://localhost:3000', 'http://127.0.0.1:3000'],\n  credentials: true\n}));\n\n// Body parsing middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// API routes\napp.use('/api/auth', authRoutes);\napp.use('/api/chat', chatRoutes);\n\n// Keep-alive endpoint to prevent server sleep\napp.get('/api/ping', (req, res) => {\n  res.json({ \n    status: 'alive', \n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// Health check endpoint\napp.get('/api/health', (req, res) => {\n  res.json({ \n    status: 'healthy',\n    environment: process.env.NODE_ENV,\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Serve static files from React build (for production)\nif (process.env.NODE_ENV === 'production') {\n  app.use(express.static(path.join(__dirname, '../client/build')));\n  \n  // Handle React routing, return all requests to React app\n  app.get('*', (req, res) => {\n    res.sendFile(path.join(__dirname, '../client/build', 'index.html'));\n  });\n} else {\n  // Development route\n  app.get('/', (req, res) => {\n    res.json({ \n      message: 'ChatGPT Clone Backend API',\n      endpoints: {\n        auth: '/api/auth/*',\n        chat: '/api/chat/*',\n        ping: '/api/ping',\n        health: '/api/health'\n      }\n    });\n  });\n}\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('Unhandled error:', err);\n  res.status(500).json({ \n    error: 'Internal server error',\n    ...(process.env.NODE_ENV === 'development' && { details: err.message })\n  });\n});\n\n// 404 handler\napp.use((req, res) => {\n  res.status(404).json({ error: 'Route not found' });\n});\n\n// Background job to keep server alive (ping every 5 minutes)\nif (process.env.NODE_ENV === 'production') {\n  setInterval(() => {\n    // Self-ping to keep server alive\n    fetch(`${process.env.SERVER_URL || 'http://localhost:' + PORT}/api/ping`)\n      .then(() => console.log('Keep-alive ping sent'))\n      .catch(err => console.log('Keep-alive ping failed:', err.message));\n  }, 5 * 60 * 1000); // 5 minutes\n}\n\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`ðŸš€ Server running on port ${PORT}`);\n  console.log(`ðŸ“š Environment: ${process.env.NODE_ENV || 'development'}`);\n  console.log(`ðŸ”— API endpoints available at http://localhost:${PORT}/api`);\n});\n\nmodule.exports = app;","size_bytes":3123},"client/src/App.css":{"content":".App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n","size_bytes":564},"client/src/App.tsx":{"content":"import React, { useState } from 'react';\n\nconst App: React.FC = () => {\n  const [currentView, setCurrentView] = useState<'login' | 'signup' | 'chat'>('login');\n\n  const renderView = () => {\n    switch (currentView) {\n      case 'login':\n        return (\n          <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n            <div className=\"max-w-md w-full space-y-8\">\n              <div>\n                <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n                  Sign in to your account\n                </h2>\n              </div>\n              <form className=\"mt-8 space-y-6\">\n                <div className=\"rounded-md shadow-sm -space-y-px\">\n                  <div>\n                    <input\n                      type=\"email\"\n                      required\n                      className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"Email address\"\n                    />\n                  </div>\n                  <div>\n                    <input\n                      type=\"password\"\n                      required\n                      className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"Password\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <button\n                    type=\"button\"\n                    onClick={() => setCurrentView('chat')}\n                    className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n                  >\n                    Sign in\n                  </button>\n                </div>\n                <div className=\"text-center\">\n                  <button\n                    type=\"button\"\n                    onClick={() => setCurrentView('signup')}\n                    className=\"text-blue-600 hover:text-blue-500\"\n                  >\n                    Don't have an account? Sign up\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        );\n      case 'signup':\n        return (\n          <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n            <div className=\"max-w-md w-full space-y-8\">\n              <div>\n                <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n                  Create your account\n                </h2>\n              </div>\n              <form className=\"mt-8 space-y-6\">\n                <div className=\"rounded-md shadow-sm -space-y-px\">\n                  <div>\n                    <input\n                      type=\"text\"\n                      required\n                      className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"Full name\"\n                    />\n                  </div>\n                  <div>\n                    <input\n                      type=\"email\"\n                      required\n                      className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"Email address\"\n                    />\n                  </div>\n                  <div>\n                    <input\n                      type=\"password\"\n                      required\n                      className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"Password\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <button\n                    type=\"button\"\n                    onClick={() => setCurrentView('chat')}\n                    className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n                  >\n                    Sign up\n                  </button>\n                </div>\n                <div className=\"text-center\">\n                  <button\n                    type=\"button\"\n                    onClick={() => setCurrentView('login')}\n                    className=\"text-blue-600 hover:text-blue-500\"\n                  >\n                    Already have an account? Sign in\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        );\n      case 'chat':\n        return (\n          <div className=\"h-screen bg-gray-100 flex\">\n            {/* Sidebar */}\n            <div className=\"w-64 bg-white shadow-lg\">\n              <div className=\"p-4\">\n                <h1 className=\"text-xl font-bold text-gray-800\">ChatGPT Clone</h1>\n                <button\n                  onClick={() => setCurrentView('login')}\n                  className=\"mt-4 w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700\"\n                >\n                  New Chat\n                </button>\n              </div>\n              <div className=\"p-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"p-2 bg-gray-100 rounded cursor-pointer hover:bg-gray-200\">\n                    Previous conversation 1\n                  </div>\n                  <div className=\"p-2 bg-gray-100 rounded cursor-pointer hover:bg-gray-200\">\n                    Previous conversation 2\n                  </div>\n                </div>\n              </div>\n              <div className=\"absolute bottom-0 p-4\">\n                <button\n                  onClick={() => setCurrentView('login')}\n                  className=\"text-red-600 hover:text-red-800\"\n                >\n                  Logout\n                </button>\n              </div>\n            </div>\n            \n            {/* Main chat area */}\n            <div className=\"flex-1 flex flex-col\">\n              {/* Messages */}\n              <div className=\"flex-1 overflow-y-auto p-4\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-start\">\n                    <div className=\"bg-white p-3 rounded-lg shadow max-w-xs\">\n                      <p className=\"text-gray-800\">Hello! How can I help you today?</p>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end\">\n                    <div className=\"bg-blue-600 text-white p-3 rounded-lg shadow max-w-xs\">\n                      <p>This is a test message from the user.</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Input area */}\n              <div className=\"border-t bg-white p-4\">\n                <div className=\"flex space-x-2\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Type your message here...\"\n                    className=\"flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                  <button className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700\">\n                    Send\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {renderView()}\n    </div>\n  );\n};\n\nexport default App;","size_bytes":8206},"client/src/index.css":{"content":"/* Base styles */\nbody {\n  background-color: white;\n  color: #111827;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  margin: 0;\n  padding: 0;\n}\n\n* {\n  border-color: #e5e7eb;\n  box-sizing: border-box;\n}\n\n/* Utility Classes for Layout */\n.flex { display: flex; }\n.flex-col { flex-direction: column; }\n.flex-row { flex-direction: row; }\n.flex-row-reverse { flex-direction: row-reverse; }\n.flex-1 { flex: 1 1 0%; }\n.flex-shrink-0 { flex-shrink: 0; }\n.items-center { align-items: center; }\n.items-start { align-items: flex-start; }\n.justify-center { justify-content: center; }\n.justify-start { justify-content: flex-start; }\n.justify-end { justify-content: flex-end; }\n.justify-between { justify-content: space-between; }\n\n/* Spacing Classes */\n.space-x-1 > * + * { margin-left: 0.25rem; }\n.space-x-2 > * + * { margin-left: 0.5rem; }\n.space-x-3 > * + * { margin-left: 0.75rem; }\n.space-y-3 > * + * { margin-top: 0.75rem; }\n.space-x-reverse > * + * { margin-left: 0; margin-right: 0.75rem; }\n\n.p-1 { padding: 0.25rem; }\n.p-2 { padding: 0.5rem; }\n.p-3 { padding: 0.75rem; }\n.p-4 { padding: 1rem; }\n.p-6 { padding: 1.5rem; }\n.px-1 { padding-left: 0.25rem; padding-right: 0.25rem; }\n.px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }\n.px-4 { padding-left: 1rem; padding-right: 1rem; }\n.px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }\n.py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }\n.py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }\n.py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; }\n.py-4 { padding-top: 1rem; padding-bottom: 1rem; }\n\n.m-0 { margin: 0; }\n.mb-2 { margin-bottom: 0.5rem; }\n.mb-3 { margin-bottom: 0.75rem; }\n.mb-4 { margin-bottom: 1rem; }\n.mb-6 { margin-bottom: 1.5rem; }\n.mt-1 { margin-top: 0.25rem; }\n.mt-2 { margin-top: 0.5rem; }\n.mt-3 { margin-top: 0.75rem; }\n.mt-4 { margin-top: 1rem; }\n.mx-auto { margin-left: auto; margin-right: auto; }\n.mx-6 { margin-left: 1.5rem; margin-right: 1.5rem; }\n.my-4 { margin-top: 1rem; margin-bottom: 1rem; }\n\n/* Width & Height Classes */\n.w-2 { width: 0.5rem; }\n.w-8 { width: 2rem; }\n.w-12 { width: 3rem; }\n.w-16 { width: 4rem; }\n.w-64 { width: 16rem; }\n.w-full { width: 100%; }\n.h-2 { height: 0.5rem; }\n.h-3 { height: 0.75rem; }\n.h-4 { height: 1rem; }\n.h-6 { height: 1.5rem; }\n.h-8 { height: 2rem; }\n.h-12 { height: 3rem; }\n.h-16 { height: 4rem; }\n.h-full { height: 100%; }\n.h-screen { height: 100vh; }\n\n.max-w-md { max-width: 28rem; }\n.max-w-2xl { max-width: 42rem; }\n.max-w-4xl { max-width: 56rem; }\n.max-w-full { max-width: 100%; }\n.min-w-0 { min-width: 0px; }\n\n/* Background Colors */\n.bg-white { background-color: #ffffff; }\n.bg-gray-50 { background-color: #f9fafb; }\n.bg-gray-100 { background-color: #f3f4f6; }\n.bg-gray-200 { background-color: #e5e7eb; }\n.bg-gray-600 { background-color: #4b5563; }\n.bg-gray-700 { background-color: #374151; }\n.bg-gray-800 { background-color: #1f2937; }\n.bg-gray-900 { background-color: #111827; }\n.bg-primary-50 { background-color: #eff6ff; }\n.bg-primary-600 { background-color: #2563eb; }\n.bg-primary-700 { background-color: #1d4ed8; }\n.bg-red-50 { background-color: #fef2f2; }\n\n/* Text Colors */\n.text-white { color: #ffffff; }\n.text-gray-400 { color: #9ca3af; }\n.text-gray-500 { color: #6b7280; }\n.text-gray-600 { color: #4b5563; }\n.text-gray-700 { color: #374151; }\n.text-gray-900 { color: #111827; }\n.text-primary-100 { color: #dbeafe; }\n.text-primary-600 { color: #2563eb; }\n.text-red-400 { color: #f87171; }\n.text-red-700 { color: #b91c1c; }\n.text-green-300 { color: #86efac; }\n.text-green-400 { color: #4ade80; }\n\n/* Border Colors */\n.border { border-width: 1px; }\n.border-t { border-top-width: 1px; }\n.border-b { border-bottom-width: 1px; }\n.border-gray-200 { border-color: #e5e7eb; }\n.border-gray-700 { border-color: #374151; }\n.border-primary-300 { border-color: #93c5fd; }\n.border-primary-500 { border-color: #3b82f6; }\n.border-red-200 { border-color: #fecaca; }\n\n/* Border Radius */\n.rounded { border-radius: 0.25rem; }\n.rounded-lg { border-radius: 0.5rem; }\n.rounded-full { border-radius: 9999px; }\n.rounded-bl-sm { border-bottom-left-radius: 0.125rem; }\n.rounded-br-sm { border-bottom-right-radius: 0.125rem; }\n\n/* Text Styles */\n.text-xs { font-size: 0.75rem; line-height: 1rem; }\n.text-sm { font-size: 0.875rem; line-height: 1.25rem; }\n.text-xl { font-size: 1.25rem; line-height: 1.75rem; }\n.text-2xl { font-size: 1.5rem; line-height: 2rem; }\n.font-medium { font-weight: 500; }\n.font-semibold { font-weight: 600; }\n.text-center { text-align: center; }\n.text-left { text-align: left; }\n.text-right { text-align: right; }\n.truncate { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }\n\n/* Position */\n.relative { position: relative; }\n.absolute { position: absolute; }\n.inline-block { display: inline-block; }\n.inline-flex { display: inline-flex; }\n\n/* Overflow */\n.overflow-hidden { overflow: hidden; }\n.overflow-y-auto { overflow-y: auto; }\n.overflow-x-auto { overflow-x: auto; }\n\n/* Cursor */\n.cursor-pointer { cursor: pointer; }\n\n/* Shadow */\n.shadow-sm { box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05); }\n\n/* Opacity */\n.opacity-0 { opacity: 0; }\n.opacity-50 { opacity: 0.5; }\n\n/* Grid */\n.grid { display: grid; }\n.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }\n\n/* Animations */\n.animate-pulse { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }\n.animate-spin { animation: spin 1s linear infinite; }\n\n/* Hover States */\n.hover\\:bg-primary-700:hover { background-color: #1d4ed8; }\n.hover\\:bg-gray-100:hover { background-color: #f3f4f6; }\n.hover\\:bg-gray-800:hover { background-color: #1f2937; }\n.hover\\:bg-primary-50:hover { background-color: #eff6ff; }\n.hover\\:border-primary-300:hover { border-color: #93c5fd; }\n.hover\\:text-white:hover { color: #ffffff; }\n.hover\\:text-gray-300:hover { color: #d1d5db; }\n.hover\\:text-gray-600:hover { color: #4b5563; }\n.hover\\:text-red-400:hover { color: #f87171; }\n\n/* Focus States */\n.focus\\:outline-none:focus { outline: 2px solid transparent; outline-offset: 2px; }\n.focus\\:ring-2:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000); }\n.focus\\:ring-primary-500:focus { --tw-ring-opacity: 1; --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity)); }\n\n/* Transition */\n.transition-colors { transition-property: color, background-color, border-color, text-decoration-color, fill, stroke; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }\n.transition-opacity { transition-property: opacity; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }\n\n/* Group States */\n.group:hover .group-hover\\:opacity-100 { opacity: 1; }\n\n/* Responsive */\n@media (min-width: 768px) {\n  .md\\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }\n}\n\n/* Scrollbar styles */\n.scrollbar-thin {\n  scrollbar-width: thin;\n  scrollbar-color: #d1d5db #f9fafb;\n}\n\n.scrollbar-thin::-webkit-scrollbar {\n  width: 6px;\n}\n\n.scrollbar-thin::-webkit-scrollbar-track {\n  background: #f9fafb;\n}\n\n.scrollbar-thin::-webkit-scrollbar-thumb {\n  background-color: #d1d5db;\n  border-radius: 3px;\n}\n\n.scrollbar-thin::-webkit-scrollbar-thumb:hover {\n  background-color: #9ca3af;\n}\n\n/* Custom styles for message content */\n.message-content {\n  line-height: 1.625;\n}\n\n.message-content p {\n  margin-bottom: 0.75rem;\n}\n\n.message-content pre {\n  background-color: #f3f4f6;\n  border: 1px solid #e5e7eb;\n  border-radius: 0.5rem;\n  padding: 1rem;\n  overflow-x: auto;\n  font-size: 0.875rem;\n  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n}\n\n.message-content code {\n  background-color: #f3f4f6;\n  padding: 0.125rem 0.25rem;\n  border-radius: 0.25rem;\n  font-size: 0.875rem;\n  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n}\n\n.message-content pre code {\n  background: transparent;\n  padding: 0;\n}\n\n/* Mermaid diagram container */\n.mermaid-container {\n  margin: 1rem 0;\n  padding: 1rem;\n  background-color: #f9fafb;\n  border: 1px solid #e5e7eb;\n  border-radius: 0.5rem;\n}\n\n.mermaid-container svg {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Animation for new messages */\n@keyframes slideInUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.message-animate {\n  animation: slideInUp 0.3s ease-out;\n}\n\n/* Loading dots animation */\n.loading-dots {\n  display: inline-flex;\n  gap: 0.25rem;\n}\n\n.loading-dot {\n  width: 0.5rem;\n  height: 0.5rem;\n  background-color: #9ca3af;\n  border-radius: 50%;\n  animation: loadingPulse 1.4s infinite;\n}\n\n.loading-dot:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.loading-dot:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes loadingPulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}","size_bytes":9164},"client/src/index.tsx":{"content":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","size_bytes":272},"client/src/reportWebVitals.ts":{"content":"const reportWebVitals = (onPerfEntry?: Function) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    // Web vitals reporting - simplified for compatibility\n    console.log('Web vitals reporting enabled');\n  }\n};\n\nexport default reportWebVitals;\n","size_bytes":258},"client/src/setupTests.ts":{"content":"// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n","size_bytes":241},"server/config/database.js":{"content":"const { Pool } = require('pg');\nrequire('dotenv').config();\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n});\n\n// Initialize database tables\nconst initDB = async () => {\n  const client = await pool.connect();\n  try {\n    // Create users table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        username VARCHAR(255) UNIQUE NOT NULL,\n        email VARCHAR(255) UNIQUE NOT NULL,\n        password_hash VARCHAR(255) NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create chat_sessions table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS chat_sessions (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        title VARCHAR(255) DEFAULT 'New Chat',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create messages table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS messages (\n        id SERIAL PRIMARY KEY,\n        chat_session_id INTEGER REFERENCES chat_sessions(id) ON DELETE CASCADE,\n        role VARCHAR(20) NOT NULL CHECK (role IN ('user', 'assistant')),\n        content TEXT NOT NULL,\n        has_diagram BOOLEAN DEFAULT FALSE,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create indexes for better performance\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_chat_sessions_user_id ON chat_sessions(user_id);\n    `);\n\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_messages_chat_session_id ON messages(chat_session_id);\n    `);\n\n    console.log('Database tables initialized successfully');\n  } catch (err) {\n    console.error('Error initializing database:', err);\n    throw err;\n  } finally {\n    client.release();\n  }\n};\n\nmodule.exports = { pool, initDB };","size_bytes":2039},"server/middleware/auth.js":{"content":"const jwt = require('jsonwebtoken');\nconst User = require('../models/User');\n\nconst authenticateToken = async (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n  if (!token) {\n    return res.status(401).json({ error: 'Access token required' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId);\n    \n    if (!user) {\n      return res.status(401).json({ error: 'Invalid token' });\n    }\n\n    req.user = user;\n    next();\n  } catch (err) {\n    if (err.name === 'TokenExpiredError') {\n      return res.status(401).json({ error: 'Token expired' });\n    } else if (err.name === 'JsonWebTokenError') {\n      return res.status(401).json({ error: 'Invalid token' });\n    }\n    \n    console.error('Token verification error:', err);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n};\n\nmodule.exports = { authenticateToken };","size_bytes":1015},"server/models/ChatSession.js":{"content":"const { pool } = require('../config/database');\n\nclass ChatSession {\n  static async create(userId, title = 'New Chat') {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'INSERT INTO chat_sessions (user_id, title) VALUES ($1, $2) RETURNING *',\n        [userId, title]\n      );\n      return result.rows[0];\n    } finally {\n      client.release();\n    }\n  }\n\n  static async findByUserId(userId) {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        `SELECT cs.*, COUNT(m.id) as message_count \n         FROM chat_sessions cs \n         LEFT JOIN messages m ON cs.id = m.chat_session_id \n         WHERE cs.user_id = $1 \n         GROUP BY cs.id \n         ORDER BY cs.updated_at DESC`,\n        [userId]\n      );\n      return result.rows;\n    } finally {\n      client.release();\n    }\n  }\n\n  static async findById(id, userId) {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM chat_sessions WHERE id = $1 AND user_id = $2',\n        [id, userId]\n      );\n      return result.rows[0] || null;\n    } finally {\n      client.release();\n    }\n  }\n\n  static async updateTitle(id, userId, title) {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'UPDATE chat_sessions SET title = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 AND user_id = $3 RETURNING *',\n        [title, id, userId]\n      );\n      return result.rows[0] || null;\n    } finally {\n      client.release();\n    }\n  }\n\n  static async delete(id, userId) {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'DELETE FROM chat_sessions WHERE id = $1 AND user_id = $2 RETURNING *',\n        [id, userId]\n      );\n      return result.rows[0] || null;\n    } finally {\n      client.release();\n    }\n  }\n\n  static async updateTimestamp(id) {\n    const client = await pool.connect();\n    try {\n      await client.query(\n        'UPDATE chat_sessions SET updated_at = CURRENT_TIMESTAMP WHERE id = $1',\n        [id]\n      );\n    } finally {\n      client.release();\n    }\n  }\n}\n\nmodule.exports = ChatSession;","size_bytes":2211},"server/models/Message.js":{"content":"const { pool } = require('../config/database');\n\nclass Message {\n  static async create({ chatSessionId, role, content, hasDiagram = false }) {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'INSERT INTO messages (chat_session_id, role, content, has_diagram) VALUES ($1, $2, $3, $4) RETURNING *',\n        [chatSessionId, role, content, hasDiagram]\n      );\n      \n      // Update chat session timestamp\n      await client.query(\n        'UPDATE chat_sessions SET updated_at = CURRENT_TIMESTAMP WHERE id = $1',\n        [chatSessionId]\n      );\n      \n      return result.rows[0];\n    } finally {\n      client.release();\n    }\n  }\n\n  static async findByChatSessionId(chatSessionId, limit = 100) {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM messages WHERE chat_session_id = $1 ORDER BY created_at ASC LIMIT $2',\n        [chatSessionId, limit]\n      );\n      return result.rows;\n    } finally {\n      client.release();\n    }\n  }\n\n  static async getRecentMessages(chatSessionId, limit = 10) {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM messages WHERE chat_session_id = $1 ORDER BY created_at DESC LIMIT $2',\n        [chatSessionId, limit]\n      );\n      return result.rows.reverse(); // Return in chronological order\n    } finally {\n      client.release();\n    }\n  }\n\n  static async delete(id, chatSessionId) {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'DELETE FROM messages WHERE id = $1 AND chat_session_id = $2 RETURNING *',\n        [id, chatSessionId]\n      );\n      return result.rows[0] || null;\n    } finally {\n      client.release();\n    }\n  }\n}\n\nmodule.exports = Message;","size_bytes":1829},"server/models/User.js":{"content":"const { pool } = require('../config/database');\nconst bcrypt = require('bcryptjs');\n\nclass User {\n  static async create({ username, email, password }) {\n    const client = await pool.connect();\n    try {\n      // Hash password\n      const saltRounds = 12;\n      const passwordHash = await bcrypt.hash(password, saltRounds);\n\n      const result = await client.query(\n        'INSERT INTO users (username, email, password_hash) VALUES ($1, $2, $3) RETURNING id, username, email, created_at',\n        [username, email, passwordHash]\n      );\n\n      return result.rows[0];\n    } catch (err) {\n      if (err.code === '23505') { // Unique violation\n        if (err.constraint.includes('email')) {\n          throw new Error('Email already exists');\n        } else if (err.constraint.includes('username')) {\n          throw new Error('Username already exists');\n        }\n      }\n      throw err;\n    } finally {\n      client.release();\n    }\n  }\n\n  static async findByEmail(email) {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT id, username, email, password_hash, created_at FROM users WHERE email = $1',\n        [email]\n      );\n      return result.rows[0] || null;\n    } finally {\n      client.release();\n    }\n  }\n\n  static async findById(id) {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT id, username, email, created_at FROM users WHERE id = $1',\n        [id]\n      );\n      return result.rows[0] || null;\n    } finally {\n      client.release();\n    }\n  }\n\n  static async validatePassword(plainPassword, hashedPassword) {\n    return bcrypt.compare(plainPassword, hashedPassword);\n  }\n}\n\nmodule.exports = User;","size_bytes":1733},"server/routes/auth.js":{"content":"const express = require('express');\nconst jwt = require('jsonwebtoken');\nconst rateLimit = require('express-rate-limit');\nconst User = require('../models/User');\nconst { authenticateToken } = require('../middleware/auth');\n\nconst router = express.Router();\n\n// Rate limiting for auth endpoints\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs\n  message: { error: 'Too many authentication attempts, please try again later' }\n});\n\n// Sign up\nrouter.post('/signup', authLimiter, async (req, res) => {\n  try {\n    const { username, email, password } = req.body;\n\n    // Validation\n    if (!username || !email || !password) {\n      return res.status(400).json({ error: 'Username, email, and password are required' });\n    }\n\n    if (password.length < 6) {\n      return res.status(400).json({ error: 'Password must be at least 6 characters long' });\n    }\n\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return res.status(400).json({ error: 'Invalid email format' });\n    }\n\n    // Create user\n    const user = await User.create({ username, email, password });\n\n    // Generate JWT token\n    const token = jwt.sign(\n      { userId: user.id, email: user.email },\n      process.env.JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n\n    res.status(201).json({\n      message: 'User created successfully',\n      token,\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email\n      }\n    });\n  } catch (err) {\n    console.error('Signup error:', err);\n    \n    if (err.message === 'Email already exists' || err.message === 'Username already exists') {\n      return res.status(409).json({ error: err.message });\n    }\n    \n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Login\nrouter.post('/login', authLimiter, async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({ error: 'Email and password are required' });\n    }\n\n    // Find user by email\n    const user = await User.findByEmail(email);\n    if (!user) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Validate password\n    const isValidPassword = await User.validatePassword(password, user.password_hash);\n    if (!isValidPassword) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Generate JWT token\n    const token = jwt.sign(\n      { userId: user.id, email: user.email },\n      process.env.JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n\n    res.json({\n      message: 'Login successful',\n      token,\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email\n      }\n    });\n  } catch (err) {\n    console.error('Login error:', err);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get current user\nrouter.get('/me', authenticateToken, (req, res) => {\n  res.json({\n    user: {\n      id: req.user.id,\n      username: req.user.username,\n      email: req.user.email\n    }\n  });\n});\n\n// Logout (optional - client-side can just remove token)\nrouter.post('/logout', authenticateToken, (req, res) => {\n  res.json({ message: 'Logged out successfully' });\n});\n\nmodule.exports = router;","size_bytes":3322},"server/routes/chat.js":{"content":"const express = require('express');\nconst rateLimit = require('express-rate-limit');\nconst ChatSession = require('../models/ChatSession');\nconst Message = require('../models/Message');\nconst geminiService = require('../services/geminiService');\nconst { authenticateToken } = require('../middleware/auth');\n\nconst router = express.Router();\n\n// Rate limiting for chat endpoints\nconst chatLimiter = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 20, // limit each IP to 20 requests per minute\n  message: { error: 'Too many requests, please slow down' }\n});\n\n// Get all chat sessions for user\nrouter.get('/sessions', authenticateToken, async (req, res) => {\n  try {\n    const sessions = await ChatSession.findByUserId(req.user.id);\n    res.json({ sessions });\n  } catch (err) {\n    console.error('Error fetching chat sessions:', err);\n    res.status(500).json({ error: 'Failed to fetch chat sessions' });\n  }\n});\n\n// Create new chat session\nrouter.post('/sessions', authenticateToken, async (req, res) => {\n  try {\n    const { title } = req.body;\n    const session = await ChatSession.create(req.user.id, title);\n    res.status(201).json({ session });\n  } catch (err) {\n    console.error('Error creating chat session:', err);\n    res.status(500).json({ error: 'Failed to create chat session' });\n  }\n});\n\n// Get specific chat session with messages\nrouter.get('/sessions/:sessionId', authenticateToken, async (req, res) => {\n  try {\n    const { sessionId } = req.params;\n    \n    // Verify session belongs to user\n    const session = await ChatSession.findById(sessionId, req.user.id);\n    if (!session) {\n      return res.status(404).json({ error: 'Chat session not found' });\n    }\n\n    // Get messages for this session\n    const messages = await Message.findByChatSessionId(sessionId);\n    \n    res.json({ session, messages });\n  } catch (err) {\n    console.error('Error fetching chat session:', err);\n    res.status(500).json({ error: 'Failed to fetch chat session' });\n  }\n});\n\n// Update chat session title\nrouter.put('/sessions/:sessionId', authenticateToken, async (req, res) => {\n  try {\n    const { sessionId } = req.params;\n    const { title } = req.body;\n\n    if (!title || title.trim().length === 0) {\n      return res.status(400).json({ error: 'Title is required' });\n    }\n\n    const session = await ChatSession.updateTitle(sessionId, req.user.id, title.trim());\n    if (!session) {\n      return res.status(404).json({ error: 'Chat session not found' });\n    }\n\n    res.json({ session });\n  } catch (err) {\n    console.error('Error updating chat session:', err);\n    res.status(500).json({ error: 'Failed to update chat session' });\n  }\n});\n\n// Delete chat session\nrouter.delete('/sessions/:sessionId', authenticateToken, async (req, res) => {\n  try {\n    const { sessionId } = req.params;\n    \n    const session = await ChatSession.delete(sessionId, req.user.id);\n    if (!session) {\n      return res.status(404).json({ error: 'Chat session not found' });\n    }\n\n    res.json({ message: 'Chat session deleted successfully' });\n  } catch (err) {\n    console.error('Error deleting chat session:', err);\n    res.status(500).json({ error: 'Failed to delete chat session' });\n  }\n});\n\n// Send message in chat session\nrouter.post('/sessions/:sessionId/messages', authenticateToken, chatLimiter, async (req, res) => {\n  try {\n    const { sessionId } = req.params;\n    const { content } = req.body;\n\n    if (!content || content.trim().length === 0) {\n      return res.status(400).json({ error: 'Message content is required' });\n    }\n\n    // Verify session belongs to user\n    const session = await ChatSession.findById(sessionId, req.user.id);\n    if (!session) {\n      return res.status(404).json({ error: 'Chat session not found' });\n    }\n\n    // Save user message\n    const userMessage = await Message.create({\n      chatSessionId: sessionId,\n      role: 'user',\n      content: content.trim()\n    });\n\n    // Check if Gemini service is configured\n    if (!geminiService.isConfigured()) {\n      const errorResponse = await Message.create({\n        chatSessionId: sessionId,\n        role: 'assistant',\n        content: 'I apologize, but the AI service is not currently configured. Please contact the administrator to set up the Gemini API key.',\n        hasDiagram: false\n      });\n\n      return res.json({\n        userMessage,\n        assistantMessage: errorResponse\n      });\n    }\n\n    try {\n      // Get recent conversation history for context\n      const recentMessages = await Message.getRecentMessages(sessionId, 10);\n      \n      // Generate AI response\n      const aiResponse = await geminiService.generateResponse(content.trim(), recentMessages);\n      \n      // Save AI response\n      const assistantMessage = await Message.create({\n        chatSessionId: sessionId,\n        role: 'assistant',\n        content: aiResponse.content,\n        hasDiagram: aiResponse.hasDiagram\n      });\n\n      res.json({\n        userMessage,\n        assistantMessage\n      });\n    } catch (aiError) {\n      console.error('AI generation error:', aiError);\n      \n      // Save error response\n      const errorMessage = await Message.create({\n        chatSessionId: sessionId,\n        role: 'assistant',\n        content: `I apologize, but I'm experiencing technical difficulties: ${aiError.message}. Please try again later.`,\n        hasDiagram: false\n      });\n\n      res.json({\n        userMessage,\n        assistantMessage: errorMessage\n      });\n    }\n  } catch (err) {\n    console.error('Error sending message:', err);\n    res.status(500).json({ error: 'Failed to send message' });\n  }\n});\n\n// Regenerate last AI response\nrouter.post('/sessions/:sessionId/regenerate', authenticateToken, chatLimiter, async (req, res) => {\n  try {\n    const { sessionId } = req.params;\n\n    // Verify session belongs to user\n    const session = await ChatSession.findById(sessionId, req.user.id);\n    if (!session) {\n      return res.status(404).json({ error: 'Chat session not found' });\n    }\n\n    // Get recent messages\n    const messages = await Message.findByChatSessionId(sessionId);\n    if (messages.length < 2) {\n      return res.status(400).json({ error: 'No messages to regenerate' });\n    }\n\n    // Find the last user message\n    const lastUserMessage = [...messages].reverse().find(msg => msg.role === 'user');\n    if (!lastUserMessage) {\n      return res.status(400).json({ error: 'No user message found to regenerate response for' });\n    }\n\n    // Check if Gemini service is configured\n    if (!geminiService.isConfigured()) {\n      return res.status(503).json({ error: 'AI service not configured' });\n    }\n\n    try {\n      // Get conversation history excluding the last AI response\n      const contextMessages = messages.filter(msg => \n        msg.id !== messages[messages.length - 1].id || msg.role !== 'assistant'\n      );\n\n      // Generate new AI response\n      const aiResponse = await geminiService.generateResponse(lastUserMessage.content, contextMessages);\n      \n      // Save new AI response\n      const assistantMessage = await Message.create({\n        chatSessionId: sessionId,\n        role: 'assistant',\n        content: aiResponse.content,\n        hasDiagram: aiResponse.hasDiagram\n      });\n\n      res.json({ assistantMessage });\n    } catch (aiError) {\n      console.error('AI regeneration error:', aiError);\n      res.status(500).json({ error: `Failed to regenerate response: ${aiError.message}` });\n    }\n  } catch (err) {\n    console.error('Error regenerating message:', err);\n    res.status(500).json({ error: 'Failed to regenerate message' });\n  }\n});\n\nmodule.exports = router;","size_bytes":7609},"server/services/geminiService.js":{"content":"const { GoogleGenerativeAI } = require('@google/generative-ai');\nrequire('dotenv').config();\n\nclass GeminiService {\n  constructor() {\n    if (!process.env.GEMINI_API_KEY) {\n      console.warn('GEMINI_API_KEY not found. AI features will be disabled.');\n      this.genAI = null;\n      return;\n    }\n\n    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n    this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\n  }\n\n  async generateResponse(userMessage, conversationHistory = []) {\n    if (!this.genAI) {\n      throw new Error('Gemini API key not configured');\n    }\n\n    try {\n      // Build conversation context\n      let context = '';\n      if (conversationHistory.length > 0) {\n        context = conversationHistory\n          .slice(-6) // Last 6 messages for context\n          .map(msg => `${msg.role}: ${msg.content}`)\n          .join('\\n') + '\\n';\n      }\n\n      // Enhanced prompt for theory and diagram generation\n      const enhancedPrompt = `You are an intelligent AI assistant that provides comprehensive explanations. When responding to questions:\n\n1. ALWAYS provide a clear theoretical explanation first\n2. If the topic can benefit from a visual representation, create a Mermaid diagram\n3. Format Mermaid diagrams with proper syntax wrapped in \\`\\`\\`mermaid and \\`\\`\\`\n\nContext from conversation:\n${context}\n\nUser question: ${userMessage}\n\nPlease provide:\n1. A detailed theoretical explanation\n2. If applicable, a Mermaid diagram to visualize the concept\n\nRemember to use proper Mermaid syntax for diagrams (flowchart, graph, sequence, class, etc.).`;\n\n      const result = await this.model.generateContent(enhancedPrompt);\n      const response = await result.response;\n      const responseText = response.text();\n\n      // Check if response contains a Mermaid diagram\n      const hasDiagram = responseText.includes('```mermaid');\n\n      return {\n        content: responseText,\n        hasDiagram: hasDiagram\n      };\n    } catch (error) {\n      console.error('Gemini API error:', error);\n      \n      if (error.message.includes('API_KEY_INVALID')) {\n        throw new Error('Invalid Gemini API key');\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        throw new Error('Rate limit exceeded. Please try again later.');\n      } else if (error.message.includes('SAFETY')) {\n        throw new Error('Content filtered by safety settings');\n      }\n      \n      throw new Error('AI service temporarily unavailable');\n    }\n  }\n\n  async generateDiagramExplanation(topic) {\n    if (!this.genAI) {\n      throw new Error('Gemini API key not configured');\n    }\n\n    try {\n      const prompt = `Create a detailed explanation with a Mermaid diagram for: ${topic}\n\nPlease provide:\n1. A brief explanation of the concept\n2. A Mermaid diagram that visualizes the key components and relationships\n3. Use appropriate Mermaid diagram types (flowchart, sequence, class, etc.)\n\nFormat the diagram properly with \\`\\`\\`mermaid and \\`\\`\\` tags.`;\n\n      const result = await this.model.generateContent(prompt);\n      const response = await result.response;\n      const responseText = response.text();\n\n      return {\n        content: responseText,\n        hasDiagram: true\n      };\n    } catch (error) {\n      console.error('Diagram generation error:', error);\n      throw new Error('Failed to generate diagram explanation');\n    }\n  }\n\n  isConfigured() {\n    return this.genAI !== null;\n  }\n}\n\nmodule.exports = new GeminiService();","size_bytes":3480},"client/src/components/ChatInput.tsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { Send, Square } from 'lucide-react';\n\ninterface ChatInputProps {\n  onSendMessage: (message: string) => void;\n  isLoading: boolean;\n  disabled?: boolean;\n}\n\nconst ChatInput: React.FC<ChatInputProps> = ({ \n  onSendMessage, \n  isLoading, \n  disabled = false \n}) => {\n  const [message, setMessage] = useState('');\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, 120)}px`;\n    }\n  }, [message]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (message.trim() && !isLoading && !disabled) {\n      onSendMessage(message.trim());\n      setMessage('');\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e);\n    }\n  };\n\n  const handleStop = () => {\n    // In a real implementation, this would cancel the ongoing request\n    console.log('Stop generation requested');\n  };\n\n  return (\n    <div className=\"border-t border-gray-200 bg-white p-4\">\n      <form onSubmit={handleSubmit} className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-end space-x-3\">\n          <div className=\"flex-1 relative\">\n            <textarea\n              ref={textareaRef}\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyDown={handleKeyDown}\n              placeholder={disabled ? \"Select or create a chat to start messaging...\" : \"Type your message here... (Shift+Enter for new line)\"}\n              disabled={disabled || isLoading}\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent placeholder-gray-400 disabled:bg-gray-50 disabled:cursor-not-allowed\"\n              rows={1}\n              style={{ minHeight: '48px', maxHeight: '120px' }}\n            />\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            {isLoading ? (\n              <button\n                type=\"button\"\n                onClick={handleStop}\n                className=\"p-3 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors\"\n                title=\"Stop generation\"\n              >\n                <Square className=\"h-5 w-5\" />\n              </button>\n            ) : (\n              <button\n                type=\"submit\"\n                disabled={!message.trim() || disabled}\n                className=\"p-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                title=\"Send message\"\n              >\n                <Send className=\"h-5 w-5\" />\n              </button>\n            )}\n          </div>\n        </div>\n        \n        {message.trim() && (\n          <div className=\"mt-2 text-xs text-gray-500 text-right\">\n            Press Enter to send, Shift+Enter for new line\n          </div>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default ChatInput;","size_bytes":3371},"client/src/components/Message.tsx":{"content":"import React, { useEffect, useRef } from 'react';\nimport { Message as MessageType } from '../types';\nimport { User, Bot, Copy, RotateCcw } from 'lucide-react';\nimport ReactMarkdown from 'react-markdown';\nimport mermaid from 'mermaid';\n\n// Initialize Mermaid\nmermaid.initialize({ \n  startOnLoad: false,\n  theme: 'default',\n  securityLevel: 'loose',\n  fontFamily: 'monospace'\n});\n\ninterface MessageProps {\n  message: MessageType;\n  onRegenerate?: () => void;\n  isLastAssistantMessage?: boolean;\n}\n\nconst Message: React.FC<MessageProps> = ({ \n  message, \n  onRegenerate, \n  isLastAssistantMessage = false \n}) => {\n  const mermaidRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (message.has_diagram && mermaidRef.current) {\n      const mermaidBlocks = mermaidRef.current.querySelectorAll('.mermaid-diagram');\n      mermaidBlocks.forEach((block, index) => {\n        const element = block as HTMLElement;\n        const code = element.textContent || '';\n        \n        if (code.trim()) {\n          const uniqueId = `mermaid-${message.id}-${index}`;\n          element.id = uniqueId;\n          \n          try {\n            mermaid.render(`${uniqueId}-svg`, code).then((result) => {\n              element.innerHTML = result.svg;\n            }).catch((error) => {\n              console.error('Mermaid rendering error:', error);\n              element.innerHTML = `<pre class=\"bg-red-50 border border-red-200 text-red-700 p-3 rounded text-sm\">Error rendering diagram: ${error.message}</pre>`;\n            });\n          } catch (error) {\n            console.error('Mermaid error:', error);\n          }\n        }\n      });\n    }\n  }, [message.has_diagram, message.id]);\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n    } catch (err) {\n      console.error('Failed to copy text: ', err);\n    }\n  };\n\n  const formatMessageContent = (content: string) => {\n    // Extract mermaid diagrams\n    const mermaidRegex = /```mermaid\\n([\\s\\S]*?)\\n```/g;\n    let processedContent = content;\n    const diagrams: string[] = [];\n\n    let match;\n    while ((match = mermaidRegex.exec(content)) !== null) {\n      diagrams.push(match[1]);\n      processedContent = processedContent.replace(\n        match[0],\n        `<div class=\"mermaid-container\"><div class=\"mermaid-diagram\">${match[1]}</div></div>`\n      );\n    }\n\n    return processedContent;\n  };\n\n  const isUser = message.role === 'user';\n\n  return (\n    <div className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-6 message-animate`}>\n      <div className={`flex max-w-4xl ${isUser ? 'flex-row-reverse' : 'flex-row'} items-start space-x-3 ${isUser ? 'space-x-reverse' : ''}`}>\n        {/* Avatar */}\n        <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${\n          isUser \n            ? 'bg-primary-600 text-white' \n            : 'bg-gray-200 text-gray-600'\n        }`}>\n          {isUser ? <User className=\"h-4 w-4\" /> : <Bot className=\"h-4 w-4\" />}\n        </div>\n\n        {/* Message Content */}\n        <div className={`flex-1 ${isUser ? 'text-right' : 'text-left'}`}>\n          <div className={`inline-block max-w-full p-4 rounded-lg ${\n            isUser \n              ? 'bg-primary-600 text-white rounded-br-sm' \n              : 'bg-white border border-gray-200 rounded-bl-sm shadow-sm'\n          }`}>\n            <div className=\"message-content\" ref={mermaidRef}>\n              <ReactMarkdown\n                components={{\n                  pre: ({ children, ...props }) => (\n                    <pre {...props} className={`${isUser ? 'bg-primary-700 border-primary-500' : 'bg-gray-100 border-gray-200'} border rounded-lg p-3 overflow-x-auto text-sm`}>\n                      {children}\n                    </pre>\n                  ),\n                  code: ({ children, className, ...props }) => {\n                    const isInline = !className;\n                    return (\n                      <code \n                        {...props} \n                        className={`${\n                          isInline \n                            ? `${isUser ? 'bg-primary-700' : 'bg-gray-100'} px-1 py-0.5 rounded text-sm` \n                            : ''\n                        }`}\n                      >\n                        {children}\n                      </code>\n                    );\n                  },\n                  div: ({ children, className, ...props }) => {\n                    if (className === 'mermaid-container') {\n                      return (\n                        <div className=\"my-4 p-4 bg-gray-50 border border-gray-200 rounded-lg\">\n                          {children}\n                        </div>\n                      );\n                    }\n                    return <div {...props}>{children}</div>;\n                  }\n                }}\n              >\n                {formatMessageContent(message.content)}\n              </ReactMarkdown>\n            </div>\n\n            {/* Message Actions */}\n            <div className={`flex items-center justify-between mt-3 pt-2 border-t ${\n              isUser ? 'border-primary-500' : 'border-gray-200'\n            }`}>\n              <span className={`text-xs ${isUser ? 'text-primary-100' : 'text-gray-500'}`}>\n                {new Date(message.created_at).toLocaleTimeString([], { \n                  hour: '2-digit', \n                  minute: '2-digit' \n                })}\n              </span>\n              \n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={() => copyToClipboard(message.content)}\n                  className={`p-1 rounded hover:bg-opacity-80 transition-colors ${\n                    isUser \n                      ? 'text-primary-100 hover:bg-primary-700' \n                      : 'text-gray-400 hover:bg-gray-100'\n                  }`}\n                  title=\"Copy message\"\n                >\n                  <Copy className=\"h-3 w-3\" />\n                </button>\n                \n                {!isUser && isLastAssistantMessage && onRegenerate && (\n                  <button\n                    onClick={onRegenerate}\n                    className=\"p-1 rounded text-gray-400 hover:bg-gray-100 hover:text-gray-600 transition-colors\"\n                    title=\"Regenerate response\"\n                  >\n                    <RotateCcw className=\"h-3 w-3\" />\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;","size_bytes":6575},"client/src/components/ProtectedRoute.tsx":{"content":"import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {\n  const { isAuthenticated, isLoading } = useAuth();\n  const location = useLocation();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;","size_bytes":750},"client/src/components/Sidebar.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { ChatSession } from '../types';\nimport { \n  Plus, \n  MessageSquare, \n  LogOut, \n  Edit3, \n  Trash2, \n  Check, \n  X,\n  User\n} from 'lucide-react';\n\ninterface SidebarProps {\n  sessions: ChatSession[];\n  currentSessionId: number | null;\n  onSessionSelect: (sessionId: number) => void;\n  onNewChat: () => void;\n  onSessionDelete: (sessionId: number) => void;\n  onSessionRename: (sessionId: number, newTitle: string) => void;\n  isLoading: boolean;\n}\n\nconst Sidebar: React.FC<SidebarProps> = ({\n  sessions,\n  currentSessionId,\n  onSessionSelect,\n  onNewChat,\n  onSessionDelete,\n  onSessionRename,\n  isLoading\n}) => {\n  const { user, logout } = useAuth();\n  const [editingId, setEditingId] = useState<number | null>(null);\n  const [editTitle, setEditTitle] = useState('');\n\n  const handleEditStart = (session: ChatSession) => {\n    setEditingId(session.id);\n    setEditTitle(session.title);\n  };\n\n  const handleEditSave = () => {\n    if (editingId && editTitle.trim()) {\n      onSessionRename(editingId, editTitle.trim());\n    }\n    setEditingId(null);\n    setEditTitle('');\n  };\n\n  const handleEditCancel = () => {\n    setEditingId(null);\n    setEditTitle('');\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n\n    if (diffInHours < 24) {\n      return 'Today';\n    } else if (diffInHours < 48) {\n      return 'Yesterday';\n    } else if (diffInHours < 168) {\n      return `${Math.floor(diffInHours / 24)} days ago`;\n    } else {\n      return date.toLocaleDateString();\n    }\n  };\n\n  return (\n    <div className=\"w-64 bg-gray-900 text-white flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-700\">\n        <button\n          onClick={onNewChat}\n          className=\"w-full flex items-center justify-center space-x-2 bg-primary-600 hover:bg-primary-700 text-white py-2 px-4 rounded-lg transition-colors\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          <span>New Chat</span>\n        </button>\n      </div>\n\n      {/* Chat Sessions */}\n      <div className=\"flex-1 overflow-y-auto scrollbar-thin\">\n        {isLoading ? (\n          <div className=\"p-4\">\n            <div className=\"animate-pulse space-y-3\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-12 bg-gray-700 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        ) : sessions.length === 0 ? (\n          <div className=\"p-4 text-center text-gray-400\">\n            <MessageSquare className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">No chat sessions yet</p>\n          </div>\n        ) : (\n          <div className=\"p-2\">\n            {sessions.map((session) => (\n              <div\n                key={session.id}\n                className={`group relative mb-2 rounded-lg transition-colors ${\n                  currentSessionId === session.id\n                    ? 'bg-gray-700'\n                    : 'hover:bg-gray-800'\n                }`}\n              >\n                {editingId === session.id ? (\n                  <div className=\"p-3\">\n                    <input\n                      type=\"text\"\n                      value={editTitle}\n                      onChange={(e) => setEditTitle(e.target.value)}\n                      className=\"w-full bg-gray-600 text-white px-2 py-1 rounded text-sm focus:outline-none focus:ring-2 focus:ring-primary-500\"\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter') handleEditSave();\n                        if (e.key === 'Escape') handleEditCancel();\n                      }}\n                      autoFocus\n                    />\n                    <div className=\"flex justify-end space-x-2 mt-2\">\n                      <button\n                        onClick={handleEditSave}\n                        className=\"p-1 text-green-400 hover:text-green-300\"\n                      >\n                        <Check className=\"h-3 w-3\" />\n                      </button>\n                      <button\n                        onClick={handleEditCancel}\n                        className=\"p-1 text-red-400 hover:text-red-300\"\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  <div\n                    onClick={() => onSessionSelect(session.id)}\n                    className=\"p-3 cursor-pointer\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-white truncate\">\n                          {session.title}\n                        </p>\n                        <p className=\"text-xs text-gray-400 mt-1\">\n                          {formatDate(session.updated_at)} â€¢ {session.message_count} messages\n                        </p>\n                      </div>\n                      \n                      <div className=\"flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleEditStart(session);\n                          }}\n                          className=\"p-1 text-gray-400 hover:text-white\"\n                        >\n                          <Edit3 className=\"h-3 w-3\" />\n                        </button>\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            if (window.confirm('Are you sure you want to delete this chat?')) {\n                              onSessionDelete(session.id);\n                            }\n                          }}\n                          className=\"p-1 text-gray-400 hover:text-red-400\"\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* User Info and Logout */}\n      <div className=\"p-4 border-t border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center\">\n              <User className=\"h-4 w-4 text-white\" />\n            </div>\n            <div className=\"min-w-0\">\n              <p className=\"text-sm font-medium text-white truncate\">\n                {user?.username}\n              </p>\n              <p className=\"text-xs text-gray-400 truncate\">\n                {user?.email}\n              </p>\n            </div>\n          </div>\n          <button\n            onClick={logout}\n            className=\"p-1 text-gray-400 hover:text-white transition-colors\"\n            title=\"Logout\"\n          >\n            <LogOut className=\"h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;","size_bytes":7397},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User, LoginCredentials, SignupCredentials } from '../types';\nimport apiService from '../services/api';\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (credentials: LoginCredentials) => Promise<void>;\n  signup: (credentials: SignupCredentials) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = apiService.getAuthToken();\n      const savedUser = localStorage.getItem('user');\n\n      if (token && savedUser) {\n        try {\n          // Verify token is still valid\n          const response = await apiService.getCurrentUser();\n          setUser(response.user);\n        } catch (error) {\n          // Token is invalid\n          apiService.removeAuthToken();\n          setUser(null);\n        }\n      }\n      setIsLoading(false);\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async (credentials: LoginCredentials): Promise<void> => {\n    try {\n      const response = await apiService.login(credentials);\n      \n      apiService.setAuthToken(response.token);\n      localStorage.setItem('user', JSON.stringify(response.user));\n      setUser(response.user);\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Login failed');\n    }\n  };\n\n  const signup = async (credentials: SignupCredentials): Promise<void> => {\n    try {\n      const response = await apiService.signup(credentials);\n      \n      apiService.setAuthToken(response.token);\n      localStorage.setItem('user', JSON.stringify(response.user));\n      setUser(response.user);\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Signup failed');\n    }\n  };\n\n  const logout = (): void => {\n    apiService.removeAuthToken();\n    setUser(null);\n  };\n\n  const value: AuthContextType = {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login,\n    signup,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};","size_bytes":2647},"client/src/pages/ChatPage.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport Sidebar from '../components/Sidebar';\nimport Message from '../components/Message';\nimport ChatInput from '../components/ChatInput';\nimport { ChatSession, Message as MessageType, ChatSessionWithMessages } from '../types';\nimport apiService from '../services/api';\nimport { MessageSquare, Sparkles } from 'lucide-react';\n\nconst ChatPage: React.FC = () => {\n  const { user } = useAuth();\n  const [sessions, setSessions] = useState<ChatSession[]>([]);\n  const [currentSession, setCurrentSession] = useState<ChatSessionWithMessages | null>(null);\n  const [isLoadingSessions, setIsLoadingSessions] = useState(true);\n  const [isLoadingMessages, setIsLoadingMessages] = useState(false);\n  const [isSendingMessage, setIsSendingMessage] = useState(false);\n  const [error, setError] = useState<string>('');\n  \n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [currentSession?.messages]);\n\n  // Load chat sessions on component mount\n  useEffect(() => {\n    loadChatSessions();\n  }, []);\n\n  const loadChatSessions = async () => {\n    try {\n      setError('');\n      const response = await apiService.getChatSessions();\n      setSessions(response.sessions);\n      \n      // Auto-select the most recent session if available\n      if (response.sessions.length > 0 && !currentSession) {\n        loadChatSession(response.sessions[0].id);\n      }\n    } catch (err: any) {\n      setError('Failed to load chat sessions');\n      console.error('Error loading sessions:', err);\n    } finally {\n      setIsLoadingSessions(false);\n    }\n  };\n\n  const loadChatSession = async (sessionId: number) => {\n    try {\n      setError('');\n      setIsLoadingMessages(true);\n      const sessionData = await apiService.getChatSession(sessionId);\n      setCurrentSession(sessionData);\n    } catch (err: any) {\n      setError('Failed to load chat session');\n      console.error('Error loading session:', err);\n    } finally {\n      setIsLoadingMessages(false);\n    }\n  };\n\n  const createNewChat = async () => {\n    try {\n      setError('');\n      const response = await apiService.createChatSession('New Chat');\n      \n      // Add new session to the beginning of the list\n      setSessions(prevSessions => [response.session, ...prevSessions]);\n      \n      // Set as current session with empty messages\n      setCurrentSession({\n        session: response.session,\n        messages: []\n      });\n    } catch (err: any) {\n      setError('Failed to create new chat');\n      console.error('Error creating new chat:', err);\n    }\n  };\n\n  const handleSessionSelect = (sessionId: number) => {\n    if (currentSession?.session.id !== sessionId) {\n      loadChatSession(sessionId);\n    }\n  };\n\n  const handleSessionDelete = async (sessionId: number) => {\n    try {\n      setError('');\n      await apiService.deleteChatSession(sessionId);\n      \n      // Remove from sessions list\n      setSessions(prevSessions => prevSessions.filter(s => s.id !== sessionId));\n      \n      // If current session was deleted, clear it\n      if (currentSession?.session.id === sessionId) {\n        setCurrentSession(null);\n        \n        // Auto-select next available session\n        const remainingSessions = sessions.filter(s => s.id !== sessionId);\n        if (remainingSessions.length > 0) {\n          loadChatSession(remainingSessions[0].id);\n        }\n      }\n    } catch (err: any) {\n      setError('Failed to delete chat session');\n      console.error('Error deleting session:', err);\n    }\n  };\n\n  const handleSessionRename = async (sessionId: number, newTitle: string) => {\n    try {\n      setError('');\n      const response = await apiService.updateChatSessionTitle(sessionId, newTitle);\n      \n      // Update sessions list\n      setSessions(prevSessions => \n        prevSessions.map(s => s.id === sessionId ? response.session : s)\n      );\n      \n      // Update current session if it's the one being renamed\n      if (currentSession?.session.id === sessionId) {\n        setCurrentSession(prev => prev ? {\n          ...prev,\n          session: response.session\n        } : null);\n      }\n    } catch (err: any) {\n      setError('Failed to rename chat session');\n      console.error('Error renaming session:', err);\n    }\n  };\n\n  const handleSendMessage = async (content: string) => {\n    if (!currentSession) return;\n\n    try {\n      setError('');\n      setIsSendingMessage(true);\n\n      const response = await apiService.sendMessage(currentSession.session.id, content);\n      \n      // Update current session with new messages\n      setCurrentSession(prev => {\n        if (!prev) return null;\n        return {\n          ...prev,\n          messages: [...prev.messages, response.userMessage, response.assistantMessage]\n        };\n      });\n\n      // Update session in the list (move to top and update message count)\n      setSessions(prevSessions => {\n        const updatedSessions = prevSessions.map(s => \n          s.id === currentSession.session.id \n            ? { ...s, message_count: s.message_count + 2, updated_at: new Date().toISOString() }\n            : s\n        );\n        \n        // Move current session to top\n        const currentSessionIndex = updatedSessions.findIndex(s => s.id === currentSession.session.id);\n        if (currentSessionIndex > 0) {\n          const [currentSessionItem] = updatedSessions.splice(currentSessionIndex, 1);\n          updatedSessions.unshift(currentSessionItem);\n        }\n        \n        return updatedSessions;\n      });\n\n    } catch (err: any) {\n      setError('Failed to send message');\n      console.error('Error sending message:', err);\n    } finally {\n      setIsSendingMessage(false);\n    }\n  };\n\n  const handleRegenerateResponse = async () => {\n    if (!currentSession) return;\n\n    try {\n      setError('');\n      setIsSendingMessage(true);\n\n      const response = await apiService.regenerateResponse(currentSession.session.id);\n      \n      // Add regenerated message to current session\n      setCurrentSession(prev => {\n        if (!prev) return null;\n        return {\n          ...prev,\n          messages: [...prev.messages, response.assistantMessage]\n        };\n      });\n\n    } catch (err: any) {\n      setError('Failed to regenerate response');\n      console.error('Error regenerating response:', err);\n    } finally {\n      setIsSendingMessage(false);\n    }\n  };\n\n  const getLastAssistantMessageIndex = () => {\n    if (!currentSession?.messages) return -1;\n    for (let i = currentSession.messages.length - 1; i >= 0; i--) {\n      if (currentSession.messages[i].role === 'assistant') {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar */}\n      <Sidebar\n        sessions={sessions}\n        currentSessionId={currentSession?.session.id || null}\n        onSessionSelect={handleSessionSelect}\n        onNewChat={createNewChat}\n        onSessionDelete={handleSessionDelete}\n        onSessionRename={handleSessionRename}\n        isLoading={isLoadingSessions}\n      />\n\n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <MessageSquare className=\"h-6 w-6 text-primary-600\" />\n              <h1 className=\"text-xl font-semibold text-gray-900\">\n                {currentSession?.session.title || 'ChatGPT Clone'}\n              </h1>\n            </div>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n              <Sparkles className=\"h-4 w-4\" />\n              <span>AI Assistant</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"mx-6 mt-4 p-3 bg-red-50 border border-red-200 text-red-700 rounded-lg\">\n            {error}\n          </div>\n        )}\n\n        {/* Messages Area */}\n        <div \n          ref={messagesContainerRef}\n          className=\"flex-1 overflow-y-auto scrollbar-thin px-6 py-4\"\n        >\n          {!currentSession ? (\n            <div className=\"flex flex-col items-center justify-center h-full text-center\">\n              <MessageSquare className=\"h-16 w-16 text-gray-300 mb-4\" />\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">\n                Welcome to ChatGPT Clone\n              </h2>\n              <p className=\"text-gray-600 mb-6 max-w-md\">\n                Start a conversation with our AI assistant. Ask questions, request explanations, \n                or even generate diagrams and charts!\n              </p>\n              <button\n                onClick={createNewChat}\n                className=\"bg-primary-600 text-white px-6 py-3 rounded-lg hover:bg-primary-700 transition-colors\"\n              >\n                Start New Chat\n              </button>\n            </div>\n          ) : isLoadingMessages ? (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\n            </div>\n          ) : currentSession.messages.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center h-full text-center\">\n              <Sparkles className=\"h-16 w-16 text-gray-300 mb-4\" />\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">\n                Ready to help!\n              </h2>\n              <p className=\"text-gray-600 mb-6 max-w-md\">\n                I can help you with explanations, create diagrams, write code, and much more. \n                What would you like to explore today?\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 max-w-2xl\">\n                {[\n                  \"Explain quantum computing with a diagram\",\n                  \"Create a flowchart for user registration\",\n                  \"Show me a network architecture diagram\",\n                  \"Help me understand machine learning\"\n                ].map((suggestion, index) => (\n                  <button\n                    key={index}\n                    onClick={() => handleSendMessage(suggestion)}\n                    className=\"p-3 bg-white border border-gray-200 rounded-lg hover:border-primary-300 hover:bg-primary-50 transition-colors text-left\"\n                  >\n                    {suggestion}\n                  </button>\n                ))}\n              </div>\n            </div>\n          ) : (\n            <div className=\"max-w-4xl mx-auto\">\n              {currentSession.messages.map((message, index) => {\n                const lastAssistantIndex = getLastAssistantMessageIndex();\n                const isLastAssistantMessage = \n                  message.role === 'assistant' && index === lastAssistantIndex;\n                \n                return (\n                  <Message\n                    key={message.id}\n                    message={message}\n                    onRegenerate={isLastAssistantMessage ? handleRegenerateResponse : undefined}\n                    isLastAssistantMessage={isLastAssistantMessage}\n                  />\n                );\n              })}\n              \n              {/* Loading indicator for new messages */}\n              {isSendingMessage && (\n                <div className=\"flex justify-start mb-6\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"flex-shrink-0 w-8 h-8 rounded-full bg-gray-200 text-gray-600 flex items-center justify-center\">\n                      <Sparkles className=\"h-4 w-4\" />\n                    </div>\n                    <div className=\"bg-white border border-gray-200 rounded-lg rounded-bl-sm shadow-sm p-4\">\n                      <div className=\"loading-dots\">\n                        <div className=\"loading-dot\"></div>\n                        <div className=\"loading-dot\"></div>\n                        <div className=\"loading-dot\"></div>\n                      </div>\n                      <div className=\"text-sm text-gray-500 mt-2\">AI is thinking...</div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              <div ref={messagesEndRef} />\n            </div>\n          )}\n        </div>\n\n        {/* Chat Input */}\n        <ChatInput\n          onSendMessage={handleSendMessage}\n          isLoading={isSendingMessage}\n          disabled={!currentSession}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPage;","size_bytes":12891},"client/src/pages/LoginPage.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { LogIn, Eye, EyeOff } from 'lucide-react';\n\nconst LoginPage: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const { login } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const from = location.state?.from?.pathname || '/';\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n\n    try {\n      await login({ email, password });\n      navigate(from, { replace: true });\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <div className=\"mx-auto h-12 w-12 flex items-center justify-center rounded-full bg-primary-100\">\n            <LogIn className=\"h-6 w-6 text-primary-600\" />\n          </div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Sign in to your account\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            Or{' '}\n            <Link\n              to=\"/signup\"\n              className=\"font-medium text-primary-600 hover:text-primary-500\"\n            >\n              create a new account\n            </Link>\n          </p>\n        </div>\n        \n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md\">\n              {error}\n            </div>\n          )}\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                Email address\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Enter your email\"\n              />\n            </div>\n            \n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                Password\n              </label>\n              <div className=\"mt-1 relative\">\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  autoComplete=\"current-password\"\n                  required\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"appearance-none relative block w-full px-3 py-2 pr-10 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm\"\n                  placeholder=\"Enter your password\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n              ) : (\n                'Sign in'\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;","size_bytes":4898},"client/src/pages/SignupPage.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { UserPlus, Eye, EyeOff } from 'lucide-react';\n\nconst SignupPage: React.FC = () => {\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const { signup } = useAuth();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      setIsLoading(false);\n      return;\n    }\n\n    if (password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      await signup({ username, email, password });\n      navigate('/', { replace: true });\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <div className=\"mx-auto h-12 w-12 flex items-center justify-center rounded-full bg-primary-100\">\n            <UserPlus className=\"h-6 w-6 text-primary-600\" />\n          </div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Create your account\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            Or{' '}\n            <Link\n              to=\"/login\"\n              className=\"font-medium text-primary-600 hover:text-primary-500\"\n            >\n              sign in to your existing account\n            </Link>\n          </p>\n        </div>\n        \n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md\">\n              {error}\n            </div>\n          )}\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-700\">\n                Username\n              </label>\n              <input\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n                autoComplete=\"username\"\n                required\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Enter your username\"\n              />\n            </div>\n            \n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                Email address\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Enter your email\"\n              />\n            </div>\n            \n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                Password\n              </label>\n              <div className=\"mt-1 relative\">\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  autoComplete=\"new-password\"\n                  required\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"appearance-none relative block w-full px-3 py-2 pr-10 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm\"\n                  placeholder=\"Create a password\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </button>\n              </div>\n            </div>\n            \n            <div>\n              <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n                Confirm Password\n              </label>\n              <div className=\"mt-1 relative\">\n                <input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  autoComplete=\"new-password\"\n                  required\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  className=\"appearance-none relative block w-full px-3 py-2 pr-10 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm\"\n                  placeholder=\"Confirm your password\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                >\n                  {showConfirmPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n              ) : (\n                'Create account'\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default SignupPage;","size_bytes":7464},"client/src/services/api.ts":{"content":"import axios, { AxiosInstance, AxiosError } from 'axios';\nimport { \n  AuthResponse, \n  LoginCredentials, \n  SignupCredentials, \n  ChatSession, \n  ChatSessionWithMessages,\n  SendMessageResponse,\n  Message\n} from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nclass ApiService {\n  private api: AxiosInstance;\n\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Add token to requests if available\n    this.api.interceptors.request.use((config) => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Handle 401 responses\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error: AxiosError) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('auth_token');\n          localStorage.removeItem('user');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Authentication endpoints\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const response = await this.api.post<AuthResponse>('/auth/login', credentials);\n    return response.data;\n  }\n\n  async signup(credentials: SignupCredentials): Promise<AuthResponse> {\n    const response = await this.api.post<AuthResponse>('/auth/signup', credentials);\n    return response.data;\n  }\n\n  async getCurrentUser() {\n    const response = await this.api.get('/auth/me');\n    return response.data;\n  }\n\n  async logout() {\n    await this.api.post('/auth/logout');\n  }\n\n  // Chat endpoints\n  async getChatSessions(): Promise<{ sessions: ChatSession[] }> {\n    const response = await this.api.get<{ sessions: ChatSession[] }>('/chat/sessions');\n    return response.data;\n  }\n\n  async createChatSession(title?: string): Promise<{ session: ChatSession }> {\n    const response = await this.api.post<{ session: ChatSession }>('/chat/sessions', { title });\n    return response.data;\n  }\n\n  async getChatSession(sessionId: number): Promise<ChatSessionWithMessages> {\n    const response = await this.api.get<ChatSessionWithMessages>(`/chat/sessions/${sessionId}`);\n    return response.data;\n  }\n\n  async updateChatSessionTitle(sessionId: number, title: string): Promise<{ session: ChatSession }> {\n    const response = await this.api.put<{ session: ChatSession }>(`/chat/sessions/${sessionId}`, { title });\n    return response.data;\n  }\n\n  async deleteChatSession(sessionId: number): Promise<{ message: string }> {\n    const response = await this.api.delete<{ message: string }>(`/chat/sessions/${sessionId}`);\n    return response.data;\n  }\n\n  async sendMessage(sessionId: number, content: string): Promise<SendMessageResponse> {\n    const response = await this.api.post<SendMessageResponse>(`/chat/sessions/${sessionId}/messages`, { content });\n    return response.data;\n  }\n\n  async regenerateResponse(sessionId: number): Promise<{ assistantMessage: Message }> {\n    const response = await this.api.post<{ assistantMessage: Message }>(`/chat/sessions/${sessionId}/regenerate`);\n    return response.data;\n  }\n\n  // Utility methods\n  setAuthToken(token: string) {\n    localStorage.setItem('auth_token', token);\n  }\n\n  removeAuthToken() {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('user');\n  }\n\n  getAuthToken(): string | null {\n    return localStorage.getItem('auth_token');\n  }\n}\n\nexport const apiService = new ApiService();\nexport default apiService;","size_bytes":3639},"client/src/types/index.ts":{"content":"export interface User {\n  id: number;\n  username: string;\n  email: string;\n}\n\nexport interface AuthResponse {\n  message: string;\n  token: string;\n  user: User;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface SignupCredentials {\n  username: string;\n  email: string;\n  password: string;\n}\n\nexport interface ChatSession {\n  id: number;\n  user_id: number;\n  title: string;\n  message_count: number;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Message {\n  id: number;\n  chat_session_id: number;\n  role: 'user' | 'assistant';\n  content: string;\n  has_diagram: boolean;\n  created_at: string;\n}\n\nexport interface ChatSessionWithMessages {\n  session: ChatSession;\n  messages: Message[];\n}\n\nexport interface SendMessageResponse {\n  userMessage: Message;\n  assistantMessage: Message;\n}\n\nexport interface ApiError {\n  error: string;\n  details?: string;\n}","size_bytes":909},"replit.md":{"content":"# Overview\n\nThis is a full-stack AI-powered chat application similar to ChatGPT, built with React and Node.js. The application allows users to create multiple chat sessions, interact with Google's Gemini AI, and generate both theoretical explanations and visual diagrams using Mermaid.js. Users can manage their chat sessions with features like renaming, deleting, and creating new conversations.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\n**Technology Stack**: React 18 with TypeScript, TailwindCSS for styling, and React Router for navigation.\n\n**Component Structure**: The frontend follows a modular component-based architecture with:\n- Context-based state management for authentication using React Context API\n- Protected routes that redirect unauthenticated users to login\n- Reusable components for chat interface (ChatInput, Message, Sidebar)\n- Service layer pattern with a centralized API service using Axios\n\n**State Management**: Uses React Context for global authentication state and local component state for chat data. This approach was chosen for simplicity over Redux, as the application's state requirements are moderate.\n\n**UI/UX Design**: Implements a ChatGPT-like interface with a collapsible sidebar for chat sessions and a main chat window. TailwindCSS provides utility-first styling for rapid development and consistent design.\n\n## Backend Architecture\n\n**Server Framework**: Express.js with Node.js, providing a RESTful API structure.\n\n**Database Design**: PostgreSQL with a relational schema including:\n- Users table for authentication\n- Chat sessions table linking to users\n- Messages table storing conversation history\n- Proper foreign key relationships and indexes for performance\n\n**Authentication**: JWT-based authentication with bcrypt for password hashing. Tokens expire after 7 days and include user identification for session management.\n\n**Security Measures**: Implements Helmet for security headers, CORS configuration, rate limiting for auth and chat endpoints, and input validation.\n\n**API Structure**: Organized into separate route modules:\n- `/api/auth` for user authentication (signup, login)\n- `/api/chat` for chat session and message management\n- `/api/ping` for health checks and preventing server sleep\n\n## Data Storage Solutions\n\n**Primary Database**: PostgreSQL chosen for its ACID compliance and relational data integrity, essential for user sessions and message history.\n\n**Data Models**: \n- User model with secure password storage\n- ChatSession model linking users to conversations\n- Message model storing conversation content with diagram flags\n- Database connection pooling for efficient resource management\n\n## Authentication and Authorization\n\n**Authentication Flow**: JWT tokens stored in localStorage on frontend, automatically attached to API requests via Axios interceptors.\n\n**Authorization**: Middleware-based route protection ensuring users can only access their own chat sessions and messages.\n\n**Security Features**: Rate limiting on authentication endpoints, password strength requirements, email validation, and automatic token refresh handling.\n\n## AI Integration Architecture\n\n**AI Service**: Integrated with Google Gemini API using the official SDK. The service generates both theoretical explanations and Mermaid diagrams based on user queries.\n\n**Response Processing**: Custom prompt engineering to ensure responses include both explanatory text and visual diagrams when appropriate. Mermaid.js renders diagrams client-side for better performance.\n\n**Context Management**: Maintains conversation history (last 6 messages) for contextual AI responses while managing token limits.\n\n# External Dependencies\n\n## AI Services\n- **Google Gemini API**: Primary AI service for generating chat responses and explanations\n- **@google/generative-ai**: Official Google SDK for Gemini integration\n\n## Database\n- **PostgreSQL**: Primary database for user data, chat sessions, and message storage\n- **pg**: PostgreSQL client library for Node.js with connection pooling\n\n## Authentication & Security\n- **jsonwebtoken**: JWT token generation and verification\n- **bcryptjs**: Password hashing and comparison\n- **helmet**: Security middleware for Express\n- **express-rate-limit**: API rate limiting\n- **cors**: Cross-origin resource sharing configuration\n\n## Frontend Libraries\n- **React Router DOM**: Client-side routing and navigation\n- **Axios**: HTTP client for API communication\n- **react-markdown**: Markdown rendering for chat messages\n- **Mermaid.js**: Diagram rendering library for visual explanations\n- **Lucide React**: Icon library for UI components\n\n## Development Tools\n- **TailwindCSS**: Utility-first CSS framework\n- **TypeScript**: Type safety for both frontend and backend\n- **Nodemon**: Development server auto-restart\n- **PostCSS & Autoprefixer**: CSS processing and vendor prefixes\n\n## Deployment Infrastructure\n- **Vercel**: Planned deployment platform for both frontend and backend\n- **Environment Variables**: Configuration for API keys, database URLs, and JWT secrets","size_bytes":5126}},"version":1}